[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.3 (Eclipse Adoptium Java 11.0.25)
[debug] Load.defaultLoad until apply took 127.8196ms
[debug]           Load.loadUnit: plugins took 142.6512ms
[debug]           Load.loadUnit: defsScala took 0.4793ms
[debug] [Loading] Scanning directory D:\sparkProjects\AirportLakehouse\lakehouse\project
[debug]             Load.loadUnit: mkEval took 7.135ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.8959 ms
[info] loading settings for project lakehouse-build from idea.sbt ...
[debug]               Load.resolveProject(lakehouse-build) took 33.1934ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lakehouse-build, base: D:\sparkProjects\AirportLakehouse\lakehouse\project, plugins: List(<none>))) took 64.9707ms
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse\project, returning: (lakehouse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 352.3619ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.291ms
[debug]         Load.loadUnit(file:/D:/sparkProjects/AirportLakehouse/lakehouse/project/, ...) took 508.3167ms
[debug]       Load.apply: load took 620.6985ms
[debug]       Load.apply: resolveProjects took 4.4105ms
[debug]       Load.apply: finalTransforms took 63.0278ms
[debug]       Load.apply: config.delegates took 12.0176ms
[debug]       Load.apply: Def.make(settings)... took 525.1993ms
[debug]       Load.apply: structureIndex took 103.0442ms
[debug]       Load.apply: mkStreams took 1.4831ms
[info] loading project definition from D:\sparkProjects\AirportLakehouse\lakehouse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3341.3144ms
[debug]     Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory D:\sparkProjects\AirportLakehouse\lakehouse
[debug]       Load.loadUnit: mkEval took 0.4292ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8176 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 21.3164ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\sparkProjects\AirportLakehouse\lakehouse, plugins: List(<none>))) took 24.1897ms
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4378.972ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.9152ms
[debug]   Load.loadUnit(file:/D:/sparkProjects/AirportLakehouse/lakehouse/, ...) took 7726.883ms
[debug] Load.apply: load took 7776.7392ms
[debug] Load.apply: resolveProjects took 0.1062ms
[debug] Load.apply: finalTransforms took 25.703ms
[debug] Load.apply: config.delegates took 0.5341ms
[debug] Load.apply: Def.make(settings)... took 204.8519ms
[debug] Load.apply: structureIndex took 42.5391ms
[debug] Load.apply: mkStreams took 0.0064ms
[info] set current project to lakehouse (in build file:/D:/sparkProjects/AirportLakehouse/lakehouse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
