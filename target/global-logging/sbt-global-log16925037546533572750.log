[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\LENOVO\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.3 (Eclipse Adoptium Java 11.0.25)
[debug] Load.defaultLoad until apply took 177.7101ms
[debug]           Load.loadUnit: plugins took 173.2766ms
[debug]           Load.loadUnit: defsScala took 0.5406ms
[debug] [Loading] Scanning directory D:\sparkProjects\AirportLakehouse\lakehouse\project
[debug]             Load.loadUnit: mkEval took 12.8238ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.1986 ms
[info] loading settings for project lakehouse-build from idea.sbt ...
[debug]               Load.resolveProject(lakehouse-build) took 59.4387ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lakehouse-build, base: D:\sparkProjects\AirportLakehouse\lakehouse\project, plugins: List(<none>))) took 120.8984ms
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse\project, returning: (lakehouse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 505.2741ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.2927ms
[debug]         Load.loadUnit(file:/D:/sparkProjects/AirportLakehouse/lakehouse/project/, ...) took 696.4017ms
[debug]       Load.apply: load took 865.0374ms
[debug]       Load.apply: resolveProjects took 9.0801ms
[debug]       Load.apply: finalTransforms took 78.5962ms
[debug]       Load.apply: config.delegates took 12.142ms
[debug]       Load.apply: Def.make(settings)... took 585.6856ms
[debug]       Load.apply: structureIndex took 97.3616ms
[debug]       Load.apply: mkStreams took 1.9713ms
[info] loading project definition from D:\sparkProjects\AirportLakehouse\lakehouse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3742.0969ms
[debug]     Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory D:\sparkProjects\AirportLakehouse\lakehouse
[debug]       Load.loadUnit: mkEval took 0.2217ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.4133 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 51.175ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\sparkProjects\AirportLakehouse\lakehouse, plugins: List(<none>))) took 58.726ms
[debug] [Loading] Done in D:\sparkProjects\AirportLakehouse\lakehouse, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 15939.7316ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.8328ms
[debug]   Load.loadUnit(file:/D:/sparkProjects/AirportLakehouse/lakehouse/, ...) took 19712.9233ms
[debug] Load.apply: load took 19769.1468ms
[debug] Load.apply: resolveProjects took 0.454ms
[debug] Load.apply: finalTransforms took 216.2199ms
[debug] Load.apply: config.delegates took 1.6719ms
[debug] Load.apply: Def.make(settings)... took 852.5709ms
[debug] Load.apply: structureIndex took 217.4369ms
[debug] Load.apply: mkStreams took 0.0041ms
[info] set current project to lakehouse (in build file:/D:/sparkProjects/AirportLakehouse/lakehouse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
